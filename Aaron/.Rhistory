dt_ <- read.csv("C:\Users\tillera\Downloads\training.csv")
dt_ <- read.csv("C:/Users/tillera/Downloads/training.csv")
str(dt_)
hist(dt_$id)
View(dt_)
tr_ <- subset(dt_,select=-c("id"))
tr_ <- dt[,-c("id")]
tr_ <- dt[,!c("id")]
tr_ <- dt[,-1]
tr_ <- dt)[,-1]
tr_ <- dt_[,-1]
View(tr_)
myModel <- lm(data = tr_,price~.)
View(dt_)
dt2_ <-  read.csv("C:/Users/tillera/Downloads/dev.csv")
ts_y <- dt2_[,2]
ts_y <- as.data.frame(dt2_[,2])
View(ts_y)
colnames(ts_y) <- "price"
View(ts_y)
ts_x <- dt2_[,-c(1,2)]
ts_y$prediction <- predict(myModel,ts_x)
View(ts_y)
plot(ts_y)
rmse(ts_y$price,ts_y$prediction)
sqrt( sum( (ts_y$prediction - ts_y$price)^2 , na.rm = TRUE ) / nrow(ts_y) )
dt_ <- read.csv("H:/26.0 Commercial Reporting/1. RT Pipeline/2016/AT - Account Credits 0x1bfaa1d34e5e246d/withGLACode_temp.csv")
View(dt_)
str(dt_)
x_ <- dt_[dt_$GLACCOUNTCODE >= 4212041001,]
View(x_)
x_ <- dt_[dt_$GLACCOUNTCODE == 4212041001,]
?rda
??rda
oct(31)
require(ggplot2)
require(scales)
require(caret)
# Load the data.
source("../utilities.r")
source("../FE.r")
dt_ <- read.csv("../prostate.csv")
# try to find near zero variance predictors
nzv <- nearZeroVar(dt_[,- c(1,ncol(dt_))],saveMetrics = TRUE)
# Apparently all of them are required.
# Linear dependancies
cInf_ <- findLinearCombos(dt_[,- c(1,ncol(dt_))])
# No features to remove.
## Center and scale.
training <- Udf.Utilities.PrepareTraining(dt_)$training
testing <- Udf.Utilities.PrepareTraining(dt_)$testing
preProcessVal <- preProcess(training,method = c("center","scale"))
trXformed <- predict(preProcessVal,training)
tsXformed <- predict(preProcessVal,testing)
## PCA
pcaObj_ <- Udf.Utilities.Prcomp(trXformed[,-ncol(trXformed)],nComps = 2)
pcaRot_ <- pcaObj_$prcompObj$rotation # Rotation
pca2C_ <- pcaObj_$components # components for plot.
ggplot(pca2C_,aes(pca2C_$PC1,pca2C_$PC2,color = trXformed$Result)) + geom_point() # plot.
# amend pca components.
tmptr__ <- pcaRot_ * trXformed[,-ncol(trXformed)]
colnames(tmptr__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
trXformed <- cbind(trXformed,tmptr__[,c(1,2,3,4,5,6)])
tmpts__ <- pcaRot_ * tsXformed[,-ncol(tsXformed)]
colnames(tmpts__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
tsXformed <- cbind(tsXformed,tmpts__[,c(1,2,3,4,5,6)])
# xform + base
xPlusBaseTr <- cbind(trXformed,training[,-ncol(training)])
xPlusBaseTs <- cbind(tsXformed,testing[,-ncol(testing)])
# Move cols to end.
xPlusBaseTr <- Udf.Utilities.MoveColToEnd(xPlusBaseTr,"Result")
xPlusBaseTs <- Udf.Utilities.MoveColToEnd(xPlusBaseTs,"Result")
# Add in the sum of pca components as a feature.
xPlusBaseTrPCSum <- cbind(xPlusBaseTr,rowSums(tmptr__))
colnames(xPlusBaseTrPCSum)[ncol(xPlusBaseTrPCSum)] <- "SumPCA"
xPlusBaseTsPCSum <- cbind(xPlusBaseTs,rowSums(tmpts__))
colnames(xPlusBaseTsPCSum)[ncol(xPlusBaseTsPCSum)] <- "SumPCA"
# Move cols to end.
xPlusBaseTrPCSum <- Udf.Utilities.MoveColToEnd(xPlusBaseTrPCSum,"Result")
xPlusBaseTsPCSum <- Udf.Utilities.MoveColToEnd(xPlusBaseTsPCSum,"Result")
# 40% on validation set.
# feature sums
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
# 41.5% validation set svm
# 3 feature sums
xpbtrpcs3s <- cbind(xpbtrpcs2s,my.f2cnt(training,"ATT1","ATT2","ATT3"))
xpbtrpcs3s <- Udf.Utilities.MoveColToEnd(xpbtrpcs3s,"Result")
xpbtspcs3s <- cbind(xpbtspcs2s,my.f2cnt(testing,"ATT1","ATT2","ATT3"))
xpbtspcs3s <- Udf.Utilities.MoveColToEnd(xpbtspcs3s,"Result")
setwd("~/ADLA3/Aaron")
require(ggplot2)
require(scales)
require(caret)
# Load the data.
source("../utilities.r")
source("../FE.r")
dt_ <- read.csv("../prostate.csv")
# try to find near zero variance predictors
nzv <- nearZeroVar(dt_[,- c(1,ncol(dt_))],saveMetrics = TRUE)
# Apparently all of them are required.
# Linear dependancies
cInf_ <- findLinearCombos(dt_[,- c(1,ncol(dt_))])
# No features to remove.
## Center and scale.
training <- Udf.Utilities.PrepareTraining(dt_)$training
testing <- Udf.Utilities.PrepareTraining(dt_)$testing
preProcessVal <- preProcess(training,method = c("center","scale"))
trXformed <- predict(preProcessVal,training)
tsXformed <- predict(preProcessVal,testing)
## PCA
pcaObj_ <- Udf.Utilities.Prcomp(trXformed[,-ncol(trXformed)],nComps = 2)
pcaRot_ <- pcaObj_$prcompObj$rotation # Rotation
pca2C_ <- pcaObj_$components # components for plot.
ggplot(pca2C_,aes(pca2C_$PC1,pca2C_$PC2,color = trXformed$Result)) + geom_point() # plot.
# amend pca components.
tmptr__ <- pcaRot_ * trXformed[,-ncol(trXformed)]
colnames(tmptr__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
trXformed <- cbind(trXformed,tmptr__[,c(1,2,3,4,5,6)])
tmpts__ <- pcaRot_ * tsXformed[,-ncol(tsXformed)]
colnames(tmpts__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
tsXformed <- cbind(tsXformed,tmpts__[,c(1,2,3,4,5,6)])
# xform + base
xPlusBaseTr <- cbind(trXformed,training[,-ncol(training)])
xPlusBaseTs <- cbind(tsXformed,testing[,-ncol(testing)])
# Move cols to end.
xPlusBaseTr <- Udf.Utilities.MoveColToEnd(xPlusBaseTr,"Result")
xPlusBaseTs <- Udf.Utilities.MoveColToEnd(xPlusBaseTs,"Result")
# Add in the sum of pca components as a feature.
xPlusBaseTrPCSum <- cbind(xPlusBaseTr,rowSums(tmptr__))
colnames(xPlusBaseTrPCSum)[ncol(xPlusBaseTrPCSum)] <- "SumPCA"
xPlusBaseTsPCSum <- cbind(xPlusBaseTs,rowSums(tmpts__))
colnames(xPlusBaseTsPCSum)[ncol(xPlusBaseTsPCSum)] <- "SumPCA"
# Move cols to end.
xPlusBaseTrPCSum <- Udf.Utilities.MoveColToEnd(xPlusBaseTrPCSum,"Result")
xPlusBaseTsPCSum <- Udf.Utilities.MoveColToEnd(xPlusBaseTsPCSum,"Result")
# 40% on validation set.
# feature sums
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
# 41.5% validation set svm
# 3 feature sums
xpbtrpcs3s <- cbind(xpbtrpcs2s,my.f2cnt(training,"ATT1","ATT2","ATT3"))
xpbtrpcs3s <- Udf.Utilities.MoveColToEnd(xpbtrpcs3s,"Result")
xpbtspcs3s <- cbind(xpbtspcs2s,my.f2cnt(testing,"ATT1","ATT2","ATT3"))
xpbtspcs3s <- Udf.Utilities.MoveColToEnd(xpbtspcs3s,"Result")
xpbtrpcs3s <- cbind(xpbtrpcs2s,my.f2cnt(training,"ATT1","ATT2","ATT3"))
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
require(sqldf)
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
# 41.5% validation set svm
xpbtrpcs3s <- cbind(xpbtrpcs2s,my.f2cnt(training,"ATT1","ATT2","ATT3"))
View(xpbtrpcs3s)
xpbtrpcs3s <- cbind(xpbtrpcs2s,my.f3cnt(training,"ATT1","ATT2","ATT3"))
View(xpbtrpcs3s)
xpbtrpcs3s <- Udf.Utilities.MoveColToEnd(xpbtrpcs3s,"Result")
xpbtspcs3s <- cbind(xpbtspcs2s,my.f3cnt(testing,"ATT1","ATT2","ATT3"))
xpbtspcs3s <- Udf.Utilities.MoveColToEnd(xpbtspcs3s,"Result")
ctrl_ <- trainControl(method = "cv", number = 5, sampling = "down")
ctrl_ <- trainControl(method = "cv", number = 5, sampling = "down")
gbm_ <- train(Result ~ . , data = xPlusBaseTrPCSum, method = 'gbm',trControl = ctrl_)
gbm_ <- train(Result ~ . , data = xpbtrpcs3s, method = 'gbm',trControl = ctrl_)
gbm_
prd_ <- predict(bgm_,xpbtspcs3s[,-ncol(xpbtspcs3s)])
prd_ <- as.data.frame(prd_)
sum(prd_$predict == xpbtspcs3s$Result)/599
prd_ <- predict(gbm_,xpbtspcs3s[,-ncol(xpbtspcs3s)])
View(xpbtspcs3s)
View(xpbtrpcs3s)
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
colnames(xpbtrpcs2s)ncol(xpbtrpcs2s) <- "2Sums"
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
colnames(xpbtrpcs2s)ncol(xpbtrpcs2s) <- "2Sums"
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
# 41.5% validation set svm
# 3 feature sums
xpbtrpcs3s <- cbind(xpbtrpcs2s,my.f3cnt(training,"ATT1","ATT2","ATT3"))
colnames(xpbtrpcs3s)ncol(xpbtrpcs3s) <- "3Sums"
xpbtrpcs3s <- Udf.Utilities.MoveColToEnd(xpbtrpcs3s,"Result")
xpbtspcs3s <- cbind(xpbtspcs2s,my.f3cnt(testing,"ATT1","ATT2","ATT3"))
colnames(xpbtrpcs3s)ncol(xpbtrpcs3s) <- "3Sums"
xpbtspcs3s <- Udf.Utilities.MoveColToEnd(xpbtspcs3s,"Result")
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s)] <- "2Sums"
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s) <- "2Sums"]
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
# 41.5% validation set svm
# 3 feature sums
xpbtrpcs3s <- cbind(xpbtrpcs2s,my.f3cnt(training,"ATT1","ATT2","ATT3"))
colnames(xpbtrpcs3s)[ncol(xpbtrpcs3s)] <- "3Sums"
xpbtrpcs3s <- Udf.Utilities.MoveColToEnd(xpbtrpcs3s,"Result")
xpbtspcs3s <- cbind(xpbtspcs2s,my.f3cnt(testing,"ATT1","ATT2","ATT3"))
colnames(xpbtrpcs3s)[ncol(xpbtrpcs3s)] <- "3Sums"
xpbtspcs3s <- Udf.Utilities.MoveColToEnd(xpbtspcs3s,"Result")
gbm_ <- train(Result ~ . , data = xpbtrpcs3s, method = 'gbm',trControl = ctrl_)
View(xpbtrpcs3s)
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s)] <- "2Sums"
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s) <- "2Sums"]
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
# 41.5% validation set svm
# 3 feature sums
xpbtrpcs3s <- cbind(xpbtrpcs2s,my.f3cnt(training,"ATT1","ATT2","ATT3"))
colnames(xpbtrpcs3s)[ncol(xpbtrpcs3s)] <- "3Sums"
xpbtrpcs3s <- Udf.Utilities.MoveColToEnd(xpbtrpcs3s,"Result")
xpbtspcs3s <- cbind(xpbtspcs2s,my.f3cnt(testing,"ATT1","ATT2","ATT3"))
colnames(xpbtrpcs3s)[ncol(xpbtrpcs3s)] <- "3Sums"
xpbtspcs3s <- Udf.Utilities.MoveColToEnd(xpbtspcs3s,"Result")
View(xPlusBaseTr)
View(xpbtspcs3s)
View(trXformed)
View(xpbtrpcs2s)
View(xpbtrpcs3s)
# feature sums
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s)] <- "2Sums"
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s) <- "2Sums"]
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
# 41.5% validation set svm
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s)] <- "2Sums"
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s)] <- "2Sums"
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
# 41.5% validation set svm
View(xpbtrpcs2s)
source("../utilities.r")
source("../FE.r")
dt_ <- read.csv("../prostate.csv")
# try to find near zero variance predictors
nzv <- nearZeroVar(dt_[,- c(1,ncol(dt_))],saveMetrics = TRUE)
# Apparently all of them are required.
# Linear dependancies
cInf_ <- findLinearCombos(dt_[,- c(1,ncol(dt_))])
# No features to remove.
## Center and scale.
training <- Udf.Utilities.PrepareTraining(dt_)$training
testing <- Udf.Utilities.PrepareTraining(dt_)$testing
preProcessVal <- preProcess(training,method = c("center","scale"))
trXformed <- predict(preProcessVal,training)
tsXformed <- predict(preProcessVal,testing)
## PCA
pcaObj_ <- Udf.Utilities.Prcomp(trXformed[,-ncol(trXformed)],nComps = 2)
pcaRot_ <- pcaObj_$prcompObj$rotation # Rotation
pca2C_ <- pcaObj_$components # components for plot.
ggplot(pca2C_,aes(pca2C_$PC1,pca2C_$PC2,color = trXformed$Result)) + geom_point() # plot.
# amend pca components.
tmptr__ <- pcaRot_ * trXformed[,-ncol(trXformed)]
colnames(tmptr__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
trXformed <- cbind(trXformed,tmptr__[,c(1,2,3,4,5,6)])
tmpts__ <- pcaRot_ * tsXformed[,-ncol(tsXformed)]
colnames(tmpts__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
tsXformed <- cbind(tsXformed,tmpts__[,c(1,2,3,4,5,6)])
# xform + base
xPlusBaseTr <- cbind(trXformed,training[,-ncol(training)])
xPlusBaseTs <- cbind(tsXformed,testing[,-ncol(testing)])
# Move cols to end.
xPlusBaseTr <- Udf.Utilities.MoveColToEnd(xPlusBaseTr,"Result")
xPlusBaseTs <- Udf.Utilities.MoveColToEnd(xPlusBaseTs,"Result")
# Add in the sum of pca components as a feature.
xPlusBaseTrPCSum <- cbind(xPlusBaseTr,rowSums(tmptr__))
colnames(xPlusBaseTrPCSum)[ncol(xPlusBaseTrPCSum)] <- "SumPCA"
xPlusBaseTsPCSum <- cbind(xPlusBaseTs,rowSums(tmpts__))
colnames(xPlusBaseTsPCSum)[ncol(xPlusBaseTsPCSum)] <- "SumPCA"
# Move cols to end.
xPlusBaseTrPCSum <- Udf.Utilities.MoveColToEnd(xPlusBaseTrPCSum,"Result")
xPlusBaseTsPCSum <- Udf.Utilities.MoveColToEnd(xPlusBaseTsPCSum,"Result")
# 40% on validation set.
# feature sums
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s)] <- "2Sums"
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s)] <- "2Sums"
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
# 41.5% validation set svm
# 3 feature sums
xpbtrpcs3s <- cbind(xpbtrpcs2s,my.f3cnt(training,"ATT1","ATT2","ATT3"))
colnames(xpbtrpcs3s)[ncol(xpbtrpcs3s)] <- "3Sums"
xpbtrpcs3s <- Udf.Utilities.MoveColToEnd(xpbtrpcs3s,"Result")
xpbtspcs3s <- cbind(xpbtspcs2s,my.f3cnt(testing,"ATT1","ATT2","ATT3"))
colnames(xpbtrpcs3s)[ncol(xpbtrpcs3s)] <- "3Sums"
xpbtspcs3s <- Udf.Utilities.MoveColToEnd(xpbtspcs3s,"Result")
View(xpbtrpcs3s)
require(ggplot2)
require(scales)
require(caret)
require(sqldf)
# Load the data.
source("../utilities.r")
source("../FE.r")
dt_ <- read.csv("../prostate.csv")
# try to find near zero variance predictors
nzv <- nearZeroVar(dt_[,- c(1,ncol(dt_))],saveMetrics = TRUE)
# Apparently all of them are required.
# Linear dependancies
cInf_ <- findLinearCombos(dt_[,- c(1,ncol(dt_))])
# No features to remove.
## Center and scale.
training <- Udf.Utilities.PrepareTraining(dt_)$training
testing <- Udf.Utilities.PrepareTraining(dt_)$testing
preProcessVal <- preProcess(training,method = c("center","scale"))
trXformed <- predict(preProcessVal,training)
tsXformed <- predict(preProcessVal,testing)
## PCA
pcaObj_ <- Udf.Utilities.Prcomp(trXformed[,-ncol(trXformed)],nComps = 2)
pcaRot_ <- pcaObj_$prcompObj$rotation # Rotation
pca2C_ <- pcaObj_$components # components for plot.
ggplot(pca2C_,aes(pca2C_$PC1,pca2C_$PC2,color = trXformed$Result)) + geom_point() # plot.
# amend pca components.
tmptr__ <- pcaRot_ * trXformed[,-ncol(trXformed)]
colnames(tmptr__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
trXformed <- cbind(trXformed,tmptr__[,c(1,2,3,4,5,6)])
tmpts__ <- pcaRot_ * tsXformed[,-ncol(tsXformed)]
colnames(tmpts__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
tsXformed <- cbind(tsXformed,tmpts__[,c(1,2,3,4,5,6)])
# xform + base
xPlusBaseTr <- cbind(trXformed,training[,-ncol(training)])
xPlusBaseTs <- cbind(tsXformed,testing[,-ncol(testing)])
# Move cols to end.
xPlusBaseTr <- Udf.Utilities.MoveColToEnd(xPlusBaseTr,"Result")
xPlusBaseTs <- Udf.Utilities.MoveColToEnd(xPlusBaseTs,"Result")
# Add in the sum of pca components as a feature.
xPlusBaseTrPCSum <- cbind(xPlusBaseTr,rowSums(tmptr__))
colnames(xPlusBaseTrPCSum)[ncol(xPlusBaseTrPCSum)] <- "SumPCA"
xPlusBaseTsPCSum <- cbind(xPlusBaseTs,rowSums(tmpts__))
colnames(xPlusBaseTsPCSum)[ncol(xPlusBaseTsPCSum)] <- "SumPCA"
# Move cols to end.
xPlusBaseTrPCSum <- Udf.Utilities.MoveColToEnd(xPlusBaseTrPCSum,"Result")
xPlusBaseTsPCSum <- Udf.Utilities.MoveColToEnd(xPlusBaseTsPCSum,"Result")
# 40% on validation set.
# feature sums
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s)] <- "2Sums"
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s)] <- "2Sums"
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
# 41.5% validation set svm
View(xpbtrpcs2s)
source('~/ADLA3/Aaron/10007_Script.R', echo=TRUE)
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
View(xpbtrpcs2s)
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s)] <- "2Sums"
View(xpbtrpcs2s)
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
View(xpbtrpcs2s)
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
colnames(xpbtrpcs2s)[ncol(xpbtrpcs2s)] <- "2Sums"
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
View(xpbtspcs2s)
source('~/ADLA3/Aaron/10007_Script.R', echo=TRUE)
View(xpbtspcs3s)
ctrl_ <- trainControl(method = "cv", number = 5, sampling = "down")
gbm_ <- train(Result ~ . , data = xpbtrpcs3s, method = 'gbm',trControl = ctrl_)
prd_ <- predict(gbm_,xpbtspcs3s[,-ncol(xpbtspcs3s)])
prd_ <- as.data.frame(prd_)
sum(prd_$predict == xpbtspcs3s$Result)/599
View(xpbtspcs3s)
prd_ <- predict(gbm_,xpbtspcs3s[,-ncol(xpbtspcs3s)])
prd_ <- as.data.frame(prd_)
View(prd_)
sum(prd_$prd_ == xpbtspcs3s$Result)/599
gbm_ <- train(Result ~ . , data = xpbtrpcs3s, method = 'gbm')
prd_ <- predict(gbm_,xpbtspcs3s[,-ncol(xpbtspcs3s)])
prd_ <- as.data.frame(prd_)
sum(prd_$prd_ == xpbtspcs3s$Result)/599
rmeantr <- cbind(xpbtrpcs3s,rowMeans(training[,-ncol(training)]))
View(rmeantr)
colnames(rmeantr)[ncol(rmeantr)] <- "RMean"
rmeants <- cbind(xpbtspcs3s,rowMeans(testing[,-ncol(testing)]))
colnames(rmeants)[ncol(rmeants)] <- "RMean"
View(rmeants)
rmeantr <- Udf.Utilities.MoveColToEnd(rmeantr,"Result")
rmeants <- Udf.Utilities.MoveColToEnd(rmeants,"Result")
View(rmeantr)
gbm_ <- train(Result ~ . , data = xpbtrpcs3s, method = 'gbm',trControl = ctrl_)
gbm_ <- train(Result ~ . , data = rmeantr, method = 'gbm',trControl = ctrl_)
prd_ <- predict(gbm_,rmeants[,-ncol(rmeants)])
prd_ <- as.data.frame(prd_)
sum(prd_$prd_ == xpbtspcs3s$Result)/599
write.csv(rmeantr,"trFE.csv",row.names = FALSE)
write.csv(rmeants,"tsFE.csv",row.names = FALSE)

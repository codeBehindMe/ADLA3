dt_ <- read.csv("C:\Users\tillera\Downloads\training.csv")
dt_ <- read.csv("C:/Users/tillera/Downloads/training.csv")
str(dt_)
hist(dt_$id)
View(dt_)
tr_ <- subset(dt_,select=-c("id"))
tr_ <- dt[,-c("id")]
tr_ <- dt[,!c("id")]
tr_ <- dt[,-1]
tr_ <- dt)[,-1]
tr_ <- dt_[,-1]
View(tr_)
myModel <- lm(data = tr_,price~.)
View(dt_)
dt2_ <-  read.csv("C:/Users/tillera/Downloads/dev.csv")
ts_y <- dt2_[,2]
ts_y <- as.data.frame(dt2_[,2])
View(ts_y)
colnames(ts_y) <- "price"
View(ts_y)
ts_x <- dt2_[,-c(1,2)]
ts_y$prediction <- predict(myModel,ts_x)
View(ts_y)
plot(ts_y)
rmse(ts_y$price,ts_y$prediction)
sqrt( sum( (ts_y$prediction - ts_y$price)^2 , na.rm = TRUE ) / nrow(ts_y) )
dt_ <- read.csv("H:/26.0 Commercial Reporting/1. RT Pipeline/2016/AT - Account Credits 0x1bfaa1d34e5e246d/withGLACode_temp.csv")
View(dt_)
str(dt_)
x_ <- dt_[dt_$GLACCOUNTCODE >= 4212041001,]
View(x_)
x_ <- dt_[dt_$GLACCOUNTCODE == 4212041001,]
?rda
??rda
oct(31)
setwd("~/ADLA3/Aaron")
source("../utilities.r")
dt_ <- read.csv("../prostate.csv")
# Remove ID column
dt_ <- dt_[,-1]
# try to find near zero variance predictors
nzv <- nearZeroVar(dt_[,-ncol(dt_)],saveMetrics = TRUE)
# Apparently all of them are required.
# Linear dependancies
cInf_ <- findLinearCombos(dt_[,-ncol(dt_)])
require(ggplot2)
require(scales)
require(caret)
# Load the data.
source("../utilities.r")
dt_ <- read.csv("../prostate.csv")
# Remove ID column
dt_ <- dt_[,-1]
View(dt_)
nzv <- nearZeroVar(dt_[,-ncol(dt_)],saveMetrics = TRUE)
# Apparently all of them are required.
# Linear dependancies
cInf_ <- findLinearCombos(dt_[,-ncol(dt_)])
training <- Udf.Utilities.PrepareTraining(dt_)$training
testing <- Udf.Utilities.PrepareTraining(dt_)$testing
preProcessVal <- preProcess(training,method = c("center","scale"))
trXformed <- predict(preProcessVal,training)
tsXformed <- predict(preProcessVal,testing)
pcaObj_ <- Udf.Utilities.Prcomp(trXformed[,-ncol(trXformed)],nComps = 2)
pcaRot_ <- pcaObj_$prcompObj$rotation # Rotation
pca2C_ <- pcaObj_$components # components for plot.
ggplot(pca2C_,aes(pca2C_$PC1,pca2C_$PC2,color = trXformed$Result)) + geom_point() # plot.
# amend pca components.
tmp__ <- pcaRot_ * trXformed[,-ncol(trXformed)]
colnames(tmp__)[c(1,2,3,4,5,6,7,8,9)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9")
trXformed <- cbind(trXformed,tmp__[,c(1,2,3,4,5,6)])
tmp__ <- NULL
tmp__ <- pcaRot_ * tsXformed[,-ncol(tsXformed)]
colnames(tmp__)[c(1,2,3,4,5,6,7,8,9)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9")
tsXformed <- cbind(tsXformed,tmp__[,c(1,2,3,4,5,6)])
xPlusBaseTr <- cbind(tsXformed,training[,-ncol(training)])
xPlusBaseTr <- cbind(trXformed,training[,-ncol(training)])
View(xPlusBaseTr)
xPlusBaseTs <- cbind(tsXformed,testing[,-ncol(testing)])
svm_lin <- train(Result ~ . , data = xPlusBaseTr, method = "svmLinear")
View(xPlusBaseTr)
tmpc_  <- subset(xPlusBaseTr,select = "Result")
View(tmpc_)
tmpc_  <- subset(xPlusBaseTr,select = - "Result")
tmpc_  <- subset(xPlusBaseTr,select =  - c("Result"))
tmpc_  <- subset(xPlusBaseTr,select =  !c("Result"))
tmpc_  <- subset(xPlusBaseTr,select =  -which("Result"))
source("../utilities.r")
source("../utilities.r")
xPlusBaseTr <- Udf.Utilities.MoveColToEnd(xPlusBaseTr,"Result")
View(xPlusBaseTr)
dt_ <- read.csv("../prostate.csv")
View(dt_)
dt_ <- dt_[,-1]
View(dt_)
training <- Udf.Utilities.PrepareTraining(dt_)$training
testing <- Udf.Utilities.PrepareTraining(dt_)$testing
View(training)
nzv <- nearZeroVar(dt_[,- c(1,ncol(dt_))],saveMetrics = TRUE)
cInf_ <- findLinearCombos((dt_[,- c(1,ncol(dt_))])
cInf_ <- findLinearCombos(dt_[,- c(1,ncol(dt_))])
training <- Udf.Utilities.PrepareTraining(dt_)$training
View(Udf.Utilities.PrepareTraining)
Udf.Utilities.PrepareTraining()
Udf.Utilities.PrepareTraining
source('~/ADLA3/Aaron/10007_Script.R', echo=TRUE)
View(xPlusBaseTr)
svm_lin <- train(Result ~ . , data = xPlusBaseTr, method = "svmLinear")
xPlusBaseTs <- Udf.Utilities.MoveColToEnd(xPlusBaseTs,"Result")
svm_lin
svm_ <- train(Result ~ . , data = xPlusBaseTr, method = "svmRadial")
svm_
pred_ predict(svm_,xPlusBaseTs[,-ncol(xPlusBaseTs)])
pred_ <-  predict(svm_,xPlusBaseTs[,-ncol(xPlusBaseTs)])
pred_ <- cbind(pred_,xPlusBaseTs[,ncol(xPlusBaseTs)])
sum(pred_[,1] == pred_[,2])
sum(pred_[,1] == pred_[,2])/nrow(pred_)
Udf.Utilities.ClassificationMetrics(predict(svm_,xPlusBaseTs[,-ncol(xPlusBaseTs)]),xPlusBaseTs[,ncol(xPlusBaseTs)])
source("../utilities.r")
Udf.Utilities.ClassificationMetrics(predict(svm_,xPlusBaseTs[,-ncol(xPlusBaseTs)]),xPlusBaseTs[,ncol(xPlusBaseTs)])
source("../utilities.r")
Udf.Utilities.ClassificationMetrics(predict(svm_,xPlusBaseTs[,-ncol(xPlusBaseTs)]),xPlusBaseTs[,ncol(xPlusBaseTs)])
View(tmp__)
source('~/ADLA3/Aaron/10007_Script.R', echo=TRUE)
View(tmp__)
View(testing)
View(pcaRot_)
View(trXformed)
source("../utilities.r")
dt_ <- read.csv("../prostate.csv")
training <- Udf.Utilities.PrepareTraining(dt_)$training
testing <- Udf.Utilities.PrepareTraining(dt_)$testing
preProcessVal <- preProcess(training,method = c("center","scale"))
trXformed <- predict(preProcessVal,training)
tsXformed <- predict(preProcessVal,testing)
View(trXformed)
pcaObj_ <- Udf.Utilities.Prcomp(trXformed[,-ncol(trXformed)],nComps = 2)
pcaRot_ <- pcaObj_$prcompObj$rotation # Rotation
pca2C_ <- pcaObj_$components # components for plot.
ggplot(pca2C_,aes(pca2C_$PC1,pca2C_$PC2,color = trXformed$Result)) + geom_point() # plot.
View(trXformed)
tmp__ <- pcaRot_ * trXformed[,-ncol(trXformed)]
View(tmp__)
rowsum(tmp__)
rowsum(tmp__,group = 1)
rowSums(tmp__)
x_ <- rowSums(tmp__)
View(x_)
x_ <- as.data.frame(x_)
View(x_)
View(x_)
source("../utilities.r")
dt_ <- read.csv("../prostate.csv")
# try to find near zero variance predictors
nzv <- nearZeroVar(dt_[,- c(1,ncol(dt_))],saveMetrics = TRUE)
# Apparently all of them are required.
# Linear dependancies
cInf_ <- findLinearCombos(dt_[,- c(1,ncol(dt_))])
# No features to remove.
## Center and scale.
training <- Udf.Utilities.PrepareTraining(dt_)$training
testing <- Udf.Utilities.PrepareTraining(dt_)$testing
preProcessVal <- preProcess(training,method = c("center","scale"))
trXformed <- predict(preProcessVal,training)
tsXformed <- predict(preProcessVal,testing)
## PCA
pcaObj_ <- Udf.Utilities.Prcomp(trXformed[,-ncol(trXformed)],nComps = 2)
pcaRot_ <- pcaObj_$prcompObj$rotation # Rotation
pca2C_ <- pcaObj_$components # components for plot.
ggplot(pca2C_,aes(pca2C_$PC1,pca2C_$PC2,color = trXformed$Result)) + geom_point() # plot.
# amend pca components.
tmp__ <- pcaRot_ * trXformed[,-ncol(trXformed)]
colnames(tmp__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
trXformed <- cbind(trXformed,tmp__[,c(1,2,3,4,5,6)])
tmp__ <- NULL
tmp__ <- pcaRot_ * tsXformed[,-ncol(tsXformed)]
colnames(tmp__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
tsXformed <- cbind(tsXformed,tmp__[,c(1,2,3,4,5,6)])
# xform + base
xPlusBaseTr <- cbind(trXformed,training[,-ncol(training)])
xPlusBaseTs <- cbind(tsXformed,testing[,-ncol(testing)])
# Move cols to end.
xPlusBaseTr <- Udf.Utilities.MoveColToEnd(xPlusBaseTr,"Result")
xPlusBaseTs <- Udf.Utilities.MoveColToEnd(xPlusBaseTs,"Result")
View(xPlusBaseTr)
xPlusBaseTr <- cbind(xPlusBaseTr,rowSums(pcaRot_ * trXformed[,-ncol(trXformed)]))
pcaRot_ * tsXformed[,-ncol(tsXformed)]
View(trXformed)
source("../utilities.r")
dt_ <- read.csv("../prostate.csv")
# try to find near zero variance predictors
nzv <- nearZeroVar(dt_[,- c(1,ncol(dt_))],saveMetrics = TRUE)
# Apparently all of them are required.
# Linear dependancies
cInf_ <- findLinearCombos(dt_[,- c(1,ncol(dt_))])
# No features to remove.
## Center and scale.
training <- Udf.Utilities.PrepareTraining(dt_)$training
testing <- Udf.Utilities.PrepareTraining(dt_)$testing
preProcessVal <- preProcess(training,method = c("center","scale"))
trXformed <- predict(preProcessVal,training)
tsXformed <- predict(preProcessVal,testing)
## PCA
pcaObj_ <- Udf.Utilities.Prcomp(trXformed[,-ncol(trXformed)],nComps = 2)
pcaRot_ <- pcaObj_$prcompObj$rotation # Rotation
pca2C_ <- pcaObj_$components # components for plot.
ggplot(pca2C_,aes(pca2C_$PC1,pca2C_$PC2,color = trXformed$Result)) + geom_point() # plot.
# amend pca components.
tmptr__ <- pcaRot_ * trXformed[,-ncol(trXformed)]
colnames(tmp__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
trXformed <- cbind(trXformed,tmp__[,c(1,2,3,4,5,6)])
tmpts__ <- pcaRot_ * tsXformed[,-ncol(tsXformed)]
colnames(tmp__)[c(1,2,3,4,5,6,7,8,9,10)] <- c("PCA1","PCA2","PCA3","PCA4","PCA5","PCA6","PCA7","PCA8","PCA9","PCA10")
tsXformed <- cbind(tsXformed,tmp__[,c(1,2,3,4,5,6)])
# xform + base
xPlusBaseTr <- cbind(trXformed,training[,-ncol(training)])
xPlusBaseTs <- cbind(tsXformed,testing[,-ncol(testing)])
# Move cols to end.
xPlusBaseTr <- Udf.Utilities.MoveColToEnd(xPlusBaseTr,"Result")
xPlusBaseTs <- Udf.Utilities.MoveColToEnd(xPlusBaseTs,"Result")
source('~/ADLA3/Aaron/10007_Script.R', echo=TRUE)
View(tmptr__)
xPlusBaseTrPCSum <- cbind(xPlusBaseTr,rowSums(tmptr__))
xPlusBaseTsPCSum <- cbind(xPlusBaseTs,rowsums(tmpts__))
xPlusBaseTsPCSum <- cbind(xPlusBaseTs,rowSums(tmpts__))
View(xPlusBaseTsPCSum)
plot(xPlusBaseTrPCSum$`rowSums(tmptr__)`)
colnames(xPlusBaseTrPCSum)[ncol(xPlusBaseTrPCSum)] <- "SumPCA"
colnames(xPlusBaseTsPCSum)[ncol(xPlusBaseTsPCSum)] <- "SumPCA"
xPlusBaseTr <- Udf.Utilities.MoveColToEnd(xPlusBaseTrPCSum,"Result")
xPlusBaseTs <- Udf.Utilities.MoveColToEnd(xPlusBaseTsPCSum,"Result")
View(xPlusBaseTrPCSum)
svm_lin <- train(Result ~ . , data = xPlusBaseTr, method = "svmLinear")
svm_lin
svm_ <- train(Result ~ . , data = xPlusBaseTr, method = "svmRadial")
svm_
Udf.Utilities.ClassificationMetrics(predict(svm_,xPlusBaseTsPCSum[,-ncol(xPlusBaseTsPCSum)]),xPlusBaseTsPCSum[,ncol(xPlusBaseTsPCSum)])
View(xPlusBaseTsPCSum)
xPlusBaseTr <- Udf.Utilities.MoveColToEnd(xPlusBaseTrPCSum,"Result")
xPlusBaseTs <- Udf.Utilities.MoveColToEnd(xPlusBaseTsPCSum,"Result")
xPlusBaseTrPCSum <- Udf.Utilities.MoveColToEnd(xPlusBaseTrPCSum,"Result")
xPlusBaseTsPCSum <- Udf.Utilities.MoveColToEnd(xPlusBaseTsPCSum,"Result")
Udf.Utilities.ClassificationMetrics(predict(svm_,xPlusBaseTsPCSum[,-ncol(xPlusBaseTsPCSum)]),xPlusBaseTsPCSum[,ncol(xPlusBaseTsPCSum)])
svm_lin <- train(Result ~ . , data = xPlusBaseTrPCSum, method = "svmLinear")
svm_lin
Udf.Utilities.ClassificationMetrics(predict(svm_lin,xPlusBaseTsPCSum[,-ncol(xPlusBaseTsPCSum)]),xPlusBaseTsPCSum[,ncol(xPlusBaseTsPCSum)])
svm_ <- train(Result ~ . , data = xPlusBaseTrPCSum, method = "svmRadial")
svm_
Udf.Utilities.ClassificationMetrics(predict(svm_lin,xPlusBaseTsPCSum[,-ncol(xPlusBaseTsPCSum)]),xPlusBaseTsPCSum[,ncol(xPlusBaseTsPCSum)])
Udf.Utilities.ClassificationMetrics(predict(svm_,xPlusBaseTsPCSum[,-ncol(xPlusBaseTsPCSum)]),xPlusBaseTsPCSum[,ncol(xPlusBaseTsPCSum)])
sapply(dt_$ATT1,count)
sapply(dt_$ATT1,function(x) sum(dt_$ATT1 == x))
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
sumftr_ <- cbind(sumftr_,sapply(training[,i],function(x)sum(training[,i] == x)))
}
sumftr_ <- data.frame()
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
sumftr_ <- cbind(sumftr_,sapply(training[,i],function(x)sum(training[,i] == x)))
}
sumftr_ <- data.frame(nrow == nrow(training))
sumftr_ <- data.frame(nrow = nrow(training))
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
sumftr_ <- cbind(sumftr_,sapply(training[,i],function(x)sum(training[,i] == x)))
}
sapply(training[,i],function(x)sum(training[,i] == x))
for (i in colnames(training)) print(i)
sumftr_ <- data.frame(nrow = nrow(training))
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
sumftr_ <- cbind(sumftr_,sapply(training[,i],function(x)sum(training[,i] == x)))
}
sumftr_ <- data.frame(nrow = nrow(training))
View(sumftr_)
sumftr_ <- cbind(sumftr_,training)
View(sumftr_)
sumftr_ <- cbind(sumftr_,training$ATT1)
sumftr_ <- cbind(sumftr_,sapply(training[,i],function(x)sum(training[,i] == x)))
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
sumftr_ <- cbind(sumftr_,sapply(training[,i],function(x)sum(training[,i] == x)))
}
sumftr_ <- data.frame(nrow = nrow(training))
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
sumftr_ <- cbind(sumftr_,as.data.frame(sapply(training[,i],function(x)sum(training[,i] == x))))
}
sumftr_ <- list()
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
sumftr_[[i]] <- sapply(training[,i],function(x)sum(training[,i] == x))
}
sumftr_ <- list()
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
z = 1
sumftr_[[z]] <- sapply(training[,i],function(x)sum(training[,i] == x))
z = z+1
}
sumftr_ <- list()
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
z = 1
sumftr_ <- sapply(training[,i],function(x)sum(training[,i] == x))
z = z+1
}
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
z = 1
sumftr_ <- sapply(training[,i],function(x)sum(training[,i] == x))
z = z+1
}
colnames(training[,-ncol(training)])
sumftr_ <- data.frame(1)
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
z = 1
sumftr_[,i] <- sapply(training[,i],function(x)sum(training[,i] == x))
z = z+1
}
sumftr_ <- data.frame(1)
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
z = 1
sumftr_[,i] <- cbind(sumftr_,sapply(training[,i],function(x)sum(training[,i] == x)))
z = z+1
}
warnigns()
warnings()
sumftr_ <- list()
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
z = 1
sumftr_[[z]] <- sapply(training[,i],function(x)sum(training[,i] == x))
z = z+1
}
sumftr_[[1]]
sumftr_[[z]] <- sapply(training[,i],function(x)sum(training[,i] == x))
sumftr_ <- list()
sapply(training[,i],function(x)sum(training[,i] == x)
sapply(training[,i],function(x)sum(training[,i] == x))
sumftr_[[z]] <- sapply(training[,i],function(x)sum(training[,i] == x))
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
z = 1
#  sumftr_[[z]] <- sapply(training[,i],function(x)sum(training[,i] == x))
z = z+1
}
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
z = 1
sumftr_[[z]] <- sapply(training[,i],function(x)sum(training[,i] == x))
z = z+1
print(z)
}
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
z = 1
z = z+1
sumftr_[[z]] <- sapply(training[,i],function(x)sum(training[,i] == x))
print(z)
}
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
z = 1
z = z+1
sumftr_[[z]] <- sapply(training[,i],function(x)sum(training[,i] == x))
print(i)
print(z)
}
sumftr_ <- for(i in colnames(training[,-ncol(training)])){
z = 1
z = z+1
sumftr_[[z]] <- as.data.frame(sapply(training[,i],function(x)sum(training[,i] == x)))
print(i)
print(z)
}
for(i in 1:10) print i
for(i in 1:10) print (i)
sumftr_ <- for(z in 1:length(colnames(training[,-ncol(training)]))){
i <- colnames(training[,-ncol(training)])[z]
# sumftr_[[z]] <- sapply(training[,i],function(x)sum(training[,i] == x))
print(i)
print(z)
}
sumftr_ <- for(z in 1:length(colnames(training[,-ncol(training)]))){
i <- colnames(training[,-ncol(training)])[z]
sumftr_[[z]] <- sapply(training[,i],function(x)sum(training[,i] == x))
print(i)
print(z)
}
sumftr_[[z]] <- sapply(training[,i],function(x)sum(training[,i] == x))
gbm_ <- train(Result ~ . , data = xPlusBaseTrPCSum, method = 'gbm')
gbm_
Udf.Utilities.ClassificationMetrics(predict(gbm_,xPlusBaseTsPCSum[,-ncol(xPlusBaseTsPCSum)]),xPlusBaseTsPCSum$Result)
install.packages("sqldf")
install.packages("sqldf")
require(sqldf)
my.f2cnt<-function(th2, vn1, vn2, filter=TRUE) {
df<-data.frame(f1=th2[,vn1], f2=th2[,vn2], filter=filter)
sum1<-sqldf("select f1, f2, count(*) as cnt from df where filter=1 group by 1,2")
tmp<-sqldf("select b.cnt from df a left join sum1 b on a.f1=b.f1 and a.f2=b.f2")
tmp$cnt[is.na(tmp$cnt)]<-0
return(tmp$cnt)
}
my.f2cnt(dt_,"ATT1","ATT2")
plot(my.f2cnt(dt_,"ATT1","ATT2"))
hist(my.f2cnt(dt_,"ATT1","ATT2"))
source("../FE.r")
df2_ <- tv_spec_trans(dt_)
x_ <- my.f2cnt(dt_,"ATT1","ATT2")
x_ <- my.f3cnt(dt_,"ATT1","ATT2","ATT3")
hist(x_)
xpbtrpcs2s <- cbind(xPlusBaseTrPCSum,my.f2cnt(training,"ATT1","ATT2"))
View(xpbtrpcs2s)
plot(xpbtrpcs2s$`my.f2cnt(training, "ATT1", "ATT2")`,xpbtrpcs2s$Result)
ctrl_ <- trainControl(method = "cv", number = 5, sampling = "down")
xpbtrpcs2s <- Udf.Utilities.MoveColToEnd(xpbtrpcs2s,"Result")
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
xpbtspcs2s <- cbind(xPlusBaseTsPCSum,my.f2cnt(testing,"ATT1","ATT2"))
xpbtspcs2s <- Udf.Utilities.MoveColToEnd(xpbtspcs2s,"Result")
gbm_ <- train(Result ~ . , data = xPlusBaseTrPCSum, method = 'gbm')
gbm_
Udf.Utilities.ClassificationMetrics(predict(gbm_,xpbtspcs2s[,-ncol(xpbtspcs2s)]),xpbtspcs2s$Result)
svm_ <- train(Result ~ . , data = xPlusBaseTrPCSum, method = "svmRadial")
svm_
Udf.Utilities.ClassificationMetrics(predict(svm_,xpbtspcs2s[,-ncol(xpbtspcs2s)]),xpbtspcs2s$Result)
# 3 feature sums
xpbtrpcs3s <- cbind(xpbtrpcs2s,my.f2cnt(training,"ATT1","ATT2","ATT3"))
xpbtrpcs3s <- Udf.Utilities.MoveColToEnd(xpbtrpcs3s,"Result")
xpbtspcs3s <- cbind(xpbtspcs3s,my.f2cnt(testing,"ATT1","ATT2","ATT3"))
xpbtspcs3s <- Udf.Utilities.MoveColToEnd(xpbtspcs3s,"Result")
xpbtrpcs3s <- cbind(xpbtrpcs2s,my.f2cnt(training,"ATT1","ATT2","ATT3"))
xpbtrpcs3s <- Udf.Utilities.MoveColToEnd(xpbtrpcs3s,"Result")
xpbtspcs3s <- cbind(xpbtspcs3s,my.f2cnt(testing,"ATT1","ATT2","ATT3"))
xpbtspcs3s <- cbind(xpbtspcs2s,my.f2cnt(testing,"ATT1","ATT2","ATT3"))
xpbtspcs3s <- Udf.Utilities.MoveColToEnd(xpbtspcs3s,"Result")
View(xpbtspcs3s)
gbm_ <- train(Result ~ . , data = xPlusBaseTrPCSum, method = 'gbm')
View(xpbtrpcs3s)
gbm_
Udf.Utilities.ClassificationMetrics(predict(xpbtspcs3s[,-ncol(xpbtspcs3s)]),xpbtspcs3s$Result)
Udf.Utilities.ClassificationMetrics(predict(gbm_,xpbtspcs3s[,-ncol(xpbtspcs3s)]),xpbtspcs3s$Result)
write.csv(xpbtspcs3s,"tsFE.csv",row.names = FALSE)
write.csv(xpbtrpcs3s,"trFE.csv",row.names = FALSE)

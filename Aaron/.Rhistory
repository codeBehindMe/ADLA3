for(i in 1:1000) print(i)
source('~/A3/Aaron/10009_PipelineOpt.R')
setwd("~/A3/Aaron")
source('~/A3/Aaron/10009_PipelineOpt.R')
BindDeepFeatures <- function(features,weights){
# Attach the autoencoder features.
dFtMtx <- matrix(nrow = nrow(features),ncol = 13) # Genereate a container for the new features.
ftMtx_ <- as.matrix(features) # Cast input as matrix.
pb_ <- txtProgressBar(style = 3) # Progress bar.
for(i in 1:nrow(ftMtx_)){
# Drop down through teh layers.
tmp__ <- weights[[1]] %*% ftMtx_[i,]
tmp__ <- weights[[2]] %*% tmp__
tmp__ <- weights[[3]] %*% tmp__
tmp__ <- t(tmp__) # Transpose
dFtMtx[i,] <- tmp__ # Concatenate
setTxtProgressBar(pb_,i/nrow(ftMtx_))
close(pb_)
}
boundMatrix_ <- cbind(ftMtx_,dFtMtx)
return(as.data.frame(boundMatrix_))
}
ae.weights <- readRDS("AutoEncoderWeights.rds")
# Step 8
# Bind training set
feed.training.deep <- BindDeepFeatures(feed.training[,-ncol(feed.training)],ae.weights)
feed.testing.deep <- BindDeepFeatures(feed.testing[,-ncol(feed.testing)],ae.weights)
#Step 9
# rebind the labels.
feed.training.deep <- as.data.frame(cbind(feed.training.deep,training[,"Result"]))
colnames(feed.training.deep)[ncol(feed.training.deep)] <- "Result"
feed.training.deep[,"Result"] <- as.factor(feed.training.deep[,"Result"])
feed.testing.deep <- as.data.frame(cbind(feed.testing.deep,testing[,"Result"]))
colnames(feed.testing.deep)[ncol(feed.testing.deep)] <- "Result"
feed.testing.deep[,"Result"] <- as.factor(feed.testing.deep[,"Result"])
h2_tr <- as.h2o(feed.training.deep,"h2_tr")
h2_ts <- as.h2o(feed.testing.deep,"h2_ts")
dl_8 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "MaxoutWithDropout",
hidden = c(400, 600, 400),
l2 = 5e-5,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
input_dropout_ratio = 0.1,
loss = "CrossEntropy",
classification_stop = 0.45
)
prd_8 <- h2o.predict(dl_8, h2_ts)
prd_8 <- as.data.frame(prd_8)
sum(as.numeric(prd_8$predict) == as.numeric(feed.testing.deep$Result)) / 599
h2o.saveModel(dl_8, "mdl8")
dl_9 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "MaxoutWithDropout",
hidden = c(400, 600, 400),
l2 = 1e-4,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
input_dropout_ratio = 0.1,
loss = "CrossEntropy",
classification_stop = 0.45
)
prd_9 <- h2o.predict(dl_9, h2_ts)
prd_9 <- as.data.frame(prd_9)
sum(as.numeric(prd_9$predict) == as.numeric(feed.testing.deep$Result)) / 599
dl_9 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "MaxoutWithDropout",
hidden = c(400, 600, 400),
l2 = 1e-5,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
input_dropout_ratio = 0.1,
loss = "CrossEntropy",
classification_stop = 0.45
)
prd_9 <- h2o.predict(dl_9, h2_ts)
prd_9 <- as.data.frame(prd_9)
sum(as.numeric(prd_9$predict) == as.numeric(feed.testing.deep$Result)) / 599
dl_9 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "MaxoutWithDropout",
hidden = c(400, 600, 400),
l2 = 4e-5,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
input_dropout_ratio = 0.1,
loss = "CrossEntropy",
classification_stop = 0.45
)
prd_9 <- h2o.predict(dl_9, h2_ts)
prd_9 <- as.data.frame(prd_9)
sum(as.numeric(prd_9$predict) == as.numeric(feed.testing.deep$Result)) / 599
dl_9 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "MaxoutWithDropout",
hidden = c(400, 600,600, 400),
l2 = 5e-5,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
input_dropout_ratio = 0.1,
loss = "CrossEntropy",
classification_stop = 0.45
)
h2o.shutdown()
h2o.init(nthreads = -1)
dl_9 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "Tanh",
hidden = c(400, 600, 400),
l2 = 5e-5,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
input_dropout_ratio = 0.1,
loss = "CrossEntropy",
classification_stop = 0.45
)
h2_tr <- as.h2o(feed.training.deep,"h2_tr")
h2_ts <- as.h2o(feed.testing.deep,"h2_ts")
dl_9 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "Tanh",
hidden = c(400, 600, 400),
l2 = 5e-5,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
input_dropout_ratio = 0.1,
loss = "CrossEntropy",
classification_stop = 0.45
)
prd_9 <- h2o.predict(dl_9, h2_ts)
prd_9 <- as.data.frame(prd_9)
sum(as.numeric(prd_9$predict) == as.numeric(feed.testing.deep$Result)) / 599
dl_9 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "MaxoutWithDropout",
hidden = c(500, 600, 500),
l2 = 5e-5,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
input_dropout_ratio = 0.1,
loss = "CrossEntropy",
classification_stop = 0.45
)
prd_9 <- h2o.predict(dl_9, h2_ts)
prd_9 <- as.data.frame(prd_9)
sum(as.numeric(prd_9$predict) == as.numeric(feed.testing.deep$Result)) / 599
prd_8 <- h2o.predict(dl_8, h2_ts)
prd_8 <- as.data.frame(prd_8)
sum(as.numeric(prd_8$predict) == as.numeric(feed.testing.deep$Result)) / 599
dl_9 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "MaxoutWithDropout",
hidden = c(500, 600, 500),
l2 = 5e-5,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
# input_dropout_ratio = 0.1,
loss = "CrossEntropy",
classification_stop = 0.45
)
prd_9 <- h2o.predict(dl_9, h2_ts)
prd_9 <- as.data.frame(prd_9)
sum(as.numeric(prd_9$predict) == as.numeric(feed.testing.deep$Result)) / 599
dl_9 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "MaxoutWithDropout",
hidden = c(400, 600, 400),
l2 = 5e-5,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
# input_dropout_ratio = 0.1,
loss = "CrossEntropy",
classification_stop = 0.45
)
prd_9 <- h2o.predict(dl_9, h2_ts)
prd_9 <- as.data.frame(prd_9)
sum(as.numeric(prd_9$predict) == as.numeric(feed.testing.deep$Result)) / 599
dl_9 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "MaxoutWithDropout",
hidden = c(400, 600, 400),
l2 = 5e-5,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
input_dropout_ratio = 0.15,
loss = "CrossEntropy",
classification_stop = 0.45
)
h2o.shutdown(FALSE)
h2o.init(nthreads = -1)
h2_tr <- as.h2o(feed.training.deep,"h2_tr")
h2_ts <- as.h2o(feed.testing.deep,"h2_ts")
dl_9 <- h2o.deeplearning(# --%
x = 1:(ncol(h2_tr) - 1),
y = ncol(h2_tr),
training_frame = h2_tr,
validation_frame = h2_ts,
distribution = "multinomial",
activation = "MaxoutWithDropout",
hidden = c(400, 600, 400),
l2 = 5e-5,
epochs = 10,
nfolds = 10,
balance_classes = TRUE,
input_dropout_ratio = 0.15,
loss = "CrossEntropy",
classification_stop = 0.45
)
prd_9 <- h2o.predict(dl_9, h2_ts)
prd_9 <- as.data.frame(prd_9)
sum(as.numeric(prd_9$predict) == as.numeric(feed.testing.deep$Result)) / 599
h2o.getVersion()
